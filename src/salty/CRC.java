package salty;

import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.function.Function;

public class CRC {

    private final Type type;
    private final byte[] checksum;

    public CRC(Type type, ByteBuffer data) {
        this.type = type;
        this.checksum = type.compute().apply(data.mark());
        data.reset();
    }

    private static byte[] compute8(ByteBuffer bytes) {
        int crc = 0;
        while (bytes.remaining() > 0) {
            crc ^= bytes.get();
            for (int j = 0; j < 8; j++) {
                if ((crc & 0x80) != 0) {
                    crc = ((crc << 1) ^ 0x0D5);
                } else {
                    crc <<= 1;
                }
            }
            crc &= 0xFF;
        }
        return new byte[]{(byte) crc};
    }

    private static byte[] compute16(ByteBuffer bytes) {
        int crc_value = 0;
        for (int len = bytes.position(); len < bytes.limit(); len++) {
            for (int i = 0x80; i != 0; i >>= 1) {
                if ((crc_value & 0x8000) != 0) {
                    crc_value = (crc_value << 1) ^ 0x8005;
                } else {
                    crc_value = crc_value << 1;
                }
                if ((bytes.get(len) & i) != 0) {
                    crc_value ^= 0x8005;
                }
            }
        }
        return ByteBuffer.allocate(2).putShort((short) crc_value).array();
    }

    private static byte[] compute32(ByteBuffer bytes) {
        long[] table = new long[] {
                0L, 4294967471L, 8589934942L, 12884902385L,
                17179869884L, 21474837011L, 25769804770L, 30064771917L,
                34359739768L, 38654707159L, 42949674022L, 47244641417L,
                51539609540L, 55834576747L, 60129543834L, 64424511029L,
                68719479536L, 73014446687L, 77309414318L, 81604381441L,
                85899348044L, 90194315491L, 94489282834L, 98784250301L,
                103079219080L, 107374186279L, 111669153494L, 115964120697L,
                120259087668L, 124554055067L, 128849022058L, 133143989445L,
                137438959072L, 141733926223L, 146028893374L, 150323860497L,
                154618828636L, 158913796083L, 163208762882L, 167503730349L,
                171798696088L, 176093663287L, 180388630982L, 184683598185L,
                188978565668L, 193273533067L, 197568500602L, 201863467989L,
                206158438160L, 210453405631L, 214748372558L, 219043340001L,
                223338306988L, 227633274115L, 231928241394L, 236223208541L,
                240518175336L, 244813142727L, 249108110134L, 253403077529L,
                257698044116L, 261993011323L, 266287978890L, 270582946085L,
                274877918144L, 279172885359L, 283467852446L, 287762819633L,
                292057786748L, 296352754131L, 300647720994L, 304942688397L,
                309237657272L, 313532624407L, 317827592166L, 322122559305L,
                326417525764L, 330712493227L, 335007460698L, 339302428149L,
                343597392176L, 347892359583L, 352187326574L, 356482293953L,
                360777261964L, 365072229155L, 369367196370L, 373662163581L,
                377957131336L, 382252098791L, 386547066134L, 390842033593L,
                395137001204L, 399431968347L, 403726935978L, 408021903109L,
                412316876320L, 416611843727L, 420906811262L, 425201778641L,
                429496745116L, 433791712307L, 438086680002L, 442381647213L,
                446676613976L, 450971581431L, 455266548230L, 459561515689L,
                463856482788L, 468151449931L, 472446417082L, 476741384213L,
                481036350672L, 485331317887L, 489626285454L, 493921252641L,
                498216220268L, 502511187651L, 506806155058L, 511101122461L,
                515396088232L, 519691055367L, 523986022646L, 528280989785L,
                532575957780L, 536870925243L, 541165892170L, 545460859621L,
                549755836288L, 554050803503L, 558345770718L, 562640737905L,
                566935704892L, 571230672275L, 575525639266L, 579820606669L,
                584115573496L, 588410540631L, 592705508262L, 597000475401L,
                601295441988L, 605590409451L, 609885376794L, 614180344245L,
                618475314544L, 622770281951L, 627065248814L, 631360216193L,
                635655184332L, 639950151523L, 644245118610L, 648540085821L,
                652835051528L, 657130018983L, 661424986454L, 665719953913L,
                670014921396L, 674309888539L, 678604856298L, 682899823429L,
                687194784352L, 691489751759L, 695784719166L, 700079686545L,
                704374653148L, 708669620339L, 712964587906L, 717259555117L,
                721554523928L, 725849491383L, 730144458310L, 734439425769L,
                738734392740L, 743029359883L, 747324327162L, 751619294293L,
                755914262672L, 760209229887L, 764504197582L, 768799164769L,
                773094132268L, 777389099651L, 781684067186L, 785979034589L,
                790274002408L, 794568969543L, 798863936694L, 803158903833L,
                807453871956L, 811748839419L, 816043806218L, 820338773669L,
                824633752640L, 828928720111L, 833223687454L, 837518654897L,
                841813622524L, 846108589651L, 850403557282L, 854698524429L,
                858993490232L, 863288457623L, 867583424614L, 871878392009L,
                876173360004L, 880468327211L, 884763294426L, 889058261621L,
                893353227952L, 897648195103L, 901943162862L, 906238129985L,
                910533096460L, 914828063907L, 919123031378L, 923417998845L,
                927712965576L, 932007932775L, 936302899862L, 940597867065L,
                944892834164L, 949187801563L, 953482768426L, 957777735813L,
                962072701344L, 966367668495L, 970662635774L, 974957602897L,
                979252570908L, 983547538355L, 987842505282L, 992137472749L,
                996432440536L, 1000727407735L, 1005022375302L, 1009317342505L,
                1013612310116L, 1017907277515L, 1022202244922L, 1026497212309L,
                1030792176464L, 1035087143935L, 1039382110734L, 1043677078177L,
                1047972045292L, 1052267012419L, 1056561979570L, 1060856946717L,
                1065151915560L, 1069446882951L, 1073741850486L, 1078036817881L,
                1082331784340L, 1086626751547L, 1090921719242L, 1095216686437L
        };

        long crc = 0x00000000L;
        while (bytes.remaining() > 0) {
            crc = (table[(int) (((crc >> 24) ^ bytes.get()) & 0xFF)] ^ (crc << 8));
            crc &= 0xFFFFFFFFFFFFFFFFL;
        }
        return ByteBuffer.allocate(4).putInt((int) crc).array();
    }

    public Type type() {
        return type;
    }

    public byte[] toBytes() {
        return checksum;
    }

    @Override
    public String toString() {
        return "CRC{" +
                "type=" + type +
                ", checksum=" + Arrays.toString(checksum) +
                '}';
    }

    public enum Type {
        CRC8(1, CRC::compute8),
        CRC16(2, CRC::compute16),
        CRC32(4, CRC::compute32);

        private final int size;
        private final Function<ByteBuffer, byte[]> compute;

        Type(int size, Function<ByteBuffer, byte[]> compute) {
            this.size = size;
            this.compute = compute;
        }

        public int size() {
            return size;
        }

        private Function<ByteBuffer, byte[]> compute() {
            return compute;
        }
    }
}
